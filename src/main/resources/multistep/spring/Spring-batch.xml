<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
    <!-- 内存缓存batch执行信息 -->
   <!-- <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="isolationLevelForCreate" value="ISOLATION_READ_COMMITTED"/>
    </bean>-->
     <!-- DB缓存batch执行信息 -->
    <!-- <batch:job-repository id="jobRepository" data-source="dateSource" transaction-manager="transactionManager"
    table-prefix="BATCH_" isolation-level-for-create="DEFAULT"/> -->
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="isolationLevelForCreate" value="ISOLATION_READ_COMMITTED" />
		<property name="databaseType" value="mysql" />
	</bean>
    <!--  Spring Batch  job，jobrepo，trans 基本配置 -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${mysql.db.driverclass}"></property>
        <property name="url" value="${mysql.db.url}"></property>
        <property name="username" value="${mysql.db.username}"></property>
        <property name="password" value="${mysql.db.password}"></property>
    </bean>

    <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>
    <!-- csv  作业开始配置
        csvjob 包含一个step，step包含csv完整的读写功能；包含读，处理，写三个完整处理操作。
        commit-interval 标识提交间隔的个数
    -->
    <batch:job id="mutltistepjob" >
        <batch:step id="step1" next="step2"> <!--  next="step2" -->
            <batch:tasklet transaction-manager="transactionManager" task-executor="taskExecutor" throttle-limit="1">
                <batch:chunk reader="csvItemReader" writer="csvItemWriter" processor="csvItemProcessor"
                             commit-interval="1"  >
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
       <batch:step id="step2" next="step3"> <!--  next="step3" -->
        	<batch:tasklet  transaction-manager="transactionManager" task-executor="taskExecutor" throttle-limit="1">
        		 <batch:chunk reader="csvItemReaderb" writer="databaseItemWriter" processor="csvItemProcessor"
                             commit-interval="1">
                </batch:chunk>
        	</batch:tasklet>
        </batch:step>
	  	 <batch:step id="step3" next="step4"> <!--  next="step4" -->
        	<batch:tasklet  transaction-manager="transactionManager"  ref="fileDeletingTasklet"/>
        </batch:step>
       <batch:step id="step4" >  <!-- 还没有实现  next="step5" -->
        	<batch:tasklet  transaction-manager="transactionManager">
        		 <batch:chunk reader="databaseItemReader" writer="xmlItemWriter" processor="csvItemProcessor"
                             commit-interval="1"  >
                </batch:chunk>
        	</batch:tasklet>
        </batch:step>
        <!--  <batch:step id="step5">
        	<batch:tasklet  transaction-manager="transactionManager"  ref="sendingEmailTasklet" />
        </batch:step> -->
    </batch:job>
    <!-- csv 结束配置 -->
    <bean id="fileDeletingTasklet" class="org.vincent.mutlistep.FileDeletingTasklet">
    	<!-- 删除文件目录 -->
        <property name="directory" value="file:multistep/spring/"/>
    </bean>
    <!-- csv ItemReader，读操作 -->
    <bean id="csvItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="classpath:multistep/spring/inputFile.csv"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!--  lineTokenizer将文件的一行分解成一个 FieldSet，然后由 fieldSetMapper映射成POJO对象  -->
                <property name="lineTokenizer" ref="lineTokenizer"/>
                <!--读取csv文件一行数据后对应映射的javabean -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="student"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <!-- 注意需要设置Bean的scope属性为step，这是SpringBatch的一个后绑定技术，就是在生成Step的时候，才去创建bean，加载配置信息的时候就创建bean,
    	这个时候jobparameter才传过来; -->
    <bean id="csvItemReaderb" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="file:multistep/spring/outFile.csv"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <!--  lineTokenizer将文件的一行分解成一个 FieldSet，然后由 fieldSetMapper映射成POJO对象  -->
                <property name="lineTokenizer" ref="lineTokenizer"/>
                <!--读取csv文件一行数据后对应映射的javabean -->
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="prototypeBeanName" value="student"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <bean id="student" class="org.vincent.mutlistep.Student"></bean>
    <bean id="csvItemProcessor" class="org.vincent.mutlistep.StepItemProcessor"></bean>
    <!-- lineTokenizer 配置csv文件分隔符以及文件每行数据对应的javaBean 对象对应的属性-->
    <bean id="lineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value=","/>
        <!--  属性必须和 prototypeBeanName属性指定的POJO 类属性名一致。-->
        <property name="names" value="id,name,age,address"/>
    </bean>
    <!-- 写操作。 -->
    <bean id="csvItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="file:multistep/spring/outFile.csv"/>
        <!-- 负责将数据根据规则写入到 目标文件中 -->
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            	<!-- 目标文件csv文件中字段域间分隔符 -->
                <property name="delimiter" value=","/>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                    	<!-- 规定Student JavaBean 属性和csv 每个字段域映射关系。 -->
                        <property name="names" value="id,name,age,address"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
	<!-- 将数据写入到数据库中 -->
	<bean id="databaseItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource"/>
		<property name="sql"> 
			<value>
				<![CDATA[        
              insert into STUDENT(id,name,age,address) values (:id,:name,:age,:address)
             ]]>
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider">
	   		<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
	  	</property>
	</bean>
</beans>